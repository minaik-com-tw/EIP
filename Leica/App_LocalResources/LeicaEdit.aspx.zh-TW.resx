<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="all_empty" xml:space="preserve">
    <value>請輸入檢驗資料</value>
  </data>
  <data name="sp_stand" xml:space="preserve">
    <value>抽樣標準</value>
  </data>
  <data name="samp_num" xml:space="preserve">
    <value>抽驗數量</value>
  </data>
  <data name="assembly_staff" xml:space="preserve">
    <value>組立人員</value>
  </data>
  <data name="birth_dt" xml:space="preserve">
    <value>生產日期</value>
  </data>
  <data name="d_qty" xml:space="preserve">
    <value>不良數</value>
  </data>
  <data name="fun_test" xml:space="preserve">
    <value>功能檢查</value>
  </data>
  <data name="inpecter" xml:space="preserve">
    <value>檢驗人員</value>
  </data>
  <data name="insp_info" xml:space="preserve">
    <value>檢驗資訊</value>
  </data>
  <data name="insp_type" xml:space="preserve">
    <value>檢驗類別</value>
  </data>
  <data name="inspct_num" xml:space="preserve">
    <value>待驗數量</value>
  </data>
  <data name="Inspect_dt" xml:space="preserve">
    <value>檢驗日期</value>
  </data>
  <data name="inspect_empty" xml:space="preserve">
    <value>請輸入檢驗類別</value>
  </data>
  <data name="integer" xml:space="preserve">
    <value>請輸入數字</value>
  </data>
  <data name="is_exist" xml:space="preserve">
    <value>資料已存在</value>
  </data>
  <data name="is_zero" xml:space="preserve">
    <value>這個值為0</value>
  </data>
  <data name="isnum" xml:space="preserve">
    <value>不是一個數字</value>
  </data>
  <data name="judgment" xml:space="preserve">
    <value>判斷</value>
  </data>
  <data name="more_zero" xml:space="preserve">
    <value>值必</value>
  </data>
  <data name="not_data" xml:space="preserve">
    <value>尚無資料</value>
  </data>
  <data name="position" xml:space="preserve">
    <value>異常位置</value>
  </data>
  <data name="product" xml:space="preserve">
    <value>產品</value>
  </data>
  <data name="program" xml:space="preserve">
    <value>機種</value>
  </data>
  <data name="required" xml:space="preserve">
    <value>紅色項目為必填</value>
  </data>
  <data name="result" xml:space="preserve">
    <value>結果</value>
  </data>
  <data name="shape" xml:space="preserve">
    <value>異常現象</value>
  </data>
  <data name="type" xml:space="preserve">
    <value>類別</value>
  </data>
  <data name="vmi" xml:space="preserve">
    <value>外觀檢驗</value>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>產品編號與檢測時間重覆</value>
  </data>
  <data name="save_ok" xml:space="preserve">
    <value>存檔成功</value>
  </data>
  <data name="not_null" xml:space="preserve">
    <value>不可為空值</value>
  </data>
  <data name="operator" xml:space="preserve">
    <value>檢驗人員</value>
  </data>
  <data name="unable_to_run" xml:space="preserve">
    <value>測試資料尚未儲存</value>
  </data>
  <data name="operators" xml:space="preserve">
    <value>操作人員</value>
  </data>
  <data name="obsolete" xml:space="preserve">
    <value>作廢</value>
  </data>
  <data name="remind" xml:space="preserve">
    <value>催審</value>
  </data>
  <data name="submit" xml:space="preserve">
    <value>送審</value>
  </data>
  <data name="suspend" xml:space="preserve">
    <value>中止</value>
  </data>
  <data name="save" xml:space="preserve">
    <value>儲存</value>
  </data>
  <data name="back" xml:space="preserve">
    <value>回上頁</value>
  </data>
  <data name="supervisor" xml:space="preserve">
    <value>確認</value>
  </data>
  <data name="manager" xml:space="preserve">
    <value>審核</value>
  </data>
  <data name="custmer" xml:space="preserve">
    <value>客戶</value>
  </data>
  <data name="inspect_record" xml:space="preserve">
    <value>檢驗記錄總</value>
  </data>
  <data name="insp_record" xml:space="preserve">
    <value>萊卡檢驗記錄表</value>
  </data>
  <data name="insp_time" xml:space="preserve">
    <value>檢驗時間</value>
  </data>
  <data name="judg" xml:space="preserve">
    <value>判斷</value>
  </data>
  <data name="prod_no" xml:space="preserve">
    <value>產品編號</value>
  </data>
  <data name="qty" xml:space="preserve">
    <value>數量</value>
  </data>
  <data name="ts_item" xml:space="preserve">
    <value>測試項目</value>
  </data>
  <data name="ts_stand" xml:space="preserve">
    <value>測試標準</value>
  </data>
  <data name="file_large" xml:space="preserve">
    <value>檔案過大</value>
  </data>
  <data name="file_name_long" xml:space="preserve">
    <value>文件名稱超過200字</value>
  </data>
  <data name="file_exist" xml:space="preserve">
    <value>檔案已存在</value>
  </data>
  <data name="not_has_file" xml:space="preserve">
    <value>沒有上傳檔案</value>
  </data>
</root>